// In your Redux store folder, create a file named "themeSlice.ts"
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the initial state for the theme
interface toolbarSection {
  title: string,
  visible: boolean,
}

interface ScoreSchema {
  damage: number;
  task: number;
  cross: number;
  relay: number;
}

export interface crossInterface {
  title: string;
  ip: string;
  bluetoothUUID: string;
  SensitiveCross: boolean[],
  SensitiveRelay: boolean[],
  active: boolean;
  score: number;
  injured: number;
  buzzerDelay: number;
  scoreVal: ScoreSchema;
  toCrossRSSI: number[];
  toRelayRSSI: number[];
}


interface CrossState {
  cross: crossInterface[],
  toolbarViews: toolbarSection[],
}

const initialState: CrossState = {
  cross: [

  ], 
  toolbarViews: [
    {title: 'Actuator', visible: true},
    {title: 'CrossesSensitives', visible: true},
    {title: 'RelaysSensitives', visible: true},
    {title: 'Delays', visible: true},
    {title: 'Score', visible: true},
    {title: 'CrossesRSSI', visible: true},
    {title: 'RelaysRSSI', visible: true},
    {title: 'DeviceInfo', visible: true},
  ]
};

// Create a Redux slice
const crossSlice = createSlice({
  name: 'cross',
  initialState,
  reducers: {
    initiateCross: (state, action) => {
      state.cross = action.payload.value;
    },
    setToolbarView: (state, action: PayloadAction<number>) => {
      const newToolbarVeiws = [...state.toolbarViews]
      newToolbarVeiws[action.payload].visible = !newToolbarVeiws[action.payload].visible
      state.toolbarViews = newToolbarVeiws
    },
  },
});

// Export the actions generated by createSlice
export const { setToolbarView, initiateCross } = crossSlice.actions;

// Export the reducer
export default crossSlice.reducer;
