// In your Redux store folder, create a file named "themeSlice.ts"
import { addModel } from "@/api/addModel";
import { updateModel } from "@/api/updateModel";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface tagInterface {
  [key: string]: String;
  _id: string;
  name: String;
  UUID: String;
  command: String;
}

export interface readerInterface {
  [key: string]: String;
  _id: string;
  ip: string;
}

interface tagState {
  reader: readerInterface;
  tags: tagInterface[];
  refresh: boolean;
}

const initialState: tagState = {
  reader: {
    _id: "",
    ip: "",
  },
  tags: [],
  refresh: true,
};

// Create a Redux slice
const tagSlice = createSlice({
  name: "tag",
  initialState,
  reducers: {
    initiateTag: (state, action) => {
      console.log('hello')
      console.log(action.payload.value)
      state.tags = action.payload.value;
    },
    initiateReader: (state, action) => {
      console.log('why')
      console.log(action.payload.value)
      state.reader = action.payload.value[0];
    },
    setReader: (state, action) => {
      const newVal = action.payload.value;
      console.log(newVal)
      if (state.reader.ip === "") {
        const _id = addModel({ip: newVal.ip}, "reader");
        newVal._id = _id;
      } else {
        updateModel(newVal._id, newVal, "reader");
      }
      state.reader = newVal;
    },
    setTag: (state, action) => {
      const newState = [...state.tags];
      const index = action.payload.index;
      const id = newState[index]._id;
      newState[index] = action.payload.value;
      state.tags = newState;
      updateModel(id, action.payload.value, "tag");
    },
    setRefresh: (state, action) => {
      const newState = action.payload.value;
      state.refresh = newState;
    },
    pushTag: (state, action) => {
      const newState = [...state.tags];
      const _id = addModel(action.payload.value, "tag");
      newState.push({ ...action.payload.value, _id: _id });
      state.tags = newState;
    },
  },
});

// Export the actions generated by createSlice
export const {
  initiateTag,
  initiateReader,
  setTag,
  setReader,
  setRefresh,
  pushTag,
} = tagSlice.actions;

// Export the reducer
export default tagSlice.reducer;
