import Head from "next/head";
import { Inter } from "next/font/google";
import Navbar from "@/components/navigation/Navbar";
import Links from "@/components/navigation/Links";
import { setActiveTab } from "@/redux/reducers/theme";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "@/redux";
import CrossPage from "./Cross";
import MusicBoxPage from "./MusicBox";
import TagFinderPage from "./TagFinder";
import Clock from "@/components/navigation/Clock";
import DarkModeToggle from "@/components/navigation/DarkModeToggle";
import { useEffect } from "react";
import { initiateCross } from "@/redux/reducers/cross";
import { fetchCrossInitialState } from "@/api/initiateRedux";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {

  const dispatch = useDispatch()

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await fetchCrossInitialState();
        if (data !== null) {

          dispatch(initiateCross({value: data}));
        } else {
          // Handle the case when data is null, e.g., show an error message
        }
      } catch (error) {
        console.error('Error fetching initial state:', error);
        // Handle the error, e.g., show an error message
      }
    };

    fetchData();
  }, [dispatch]);

  const isDarkMode = useSelector((state: RootState) => state.theme.darkMode);
  const activeTab = useSelector((state: RootState) => state.theme.activeTab);
  
  const links = [
    { title: "خانه", href: "" },
    { title: "صلیب ها", href: "" },
    { title: "جن یاب", href: "" },
    { title: "تگ یاب", href: "" },
    { title: "گیرنده ها", href: "" },
  ];

  const tabs = [
    <CrossPage key={1}/>,
    <MusicBoxPage key={2}/>, 
    <TagFinderPage key={3}/>, 
  ]

  return (
    <>
      <Head>
        <title>Conjuring</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className={`${isDarkMode && "dark"}`}>
        <div className="bg-slate-100 dark:bg-slate-900 h-screen">
          <nav>
            <Navbar>
              <Clock />
              <Links items={links} />
              <DarkModeToggle />
            </Navbar>
          </nav>
          <main className={`h-[88%]`}>
            {tabs.map((tab, index) => (
              <div className={`${activeTab !== (index + 1) ? 'hidden' : 'block'} h-full overflow-auto p-5`} key={index} >
                {tab}
              </div>
            ))}
          </main>
        </div>
      </div>
    </>
  );
}
